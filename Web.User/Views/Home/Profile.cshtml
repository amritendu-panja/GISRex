@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@model AppUserProfileModel

<div class="row d-flex justify-content-center h-100">
    <div class="col-xl-4 align-top">
        <div class="card mb-4 mb-xl-0">
            <div class="card-header">
                <h4>Profile Picture</h4>
            </div>
            <div class="card-body text-center">
                <img class="img-account-profile rounded-circle mb-2" alt="" src="~/images/userprofiles/@Model.ImagePath">
                <div class="small font-italic text-muted mb-3">JPG or PNG no larger than 5 MB</div>
                <button class="btn btn-primary mb-2" onclick="showDialog()">Upload new image</button>
            </div>
        </div>
    </div>
    <div class="col-xl-8">
        <div class="card mb-4">
            <div class="card-header">
                <h4>Account Details</h4>                
            </div>
            <div class="card-body">
                @using (Html.BeginForm(FormMethod.Post, new { @id = "frmProfile", @onchange="formChanged()" }))
                {
                    @await Html.PartialAsync("Partial/_ValidationSummary")

                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m=> m.UserId)
                    @Html.HiddenFor(m=> m.UserName)
                    @Html.HiddenFor(m=> m.Email)
                    @Html.HiddenFor(m => m.ImageData)
                    @Html.HiddenFor(m=> m.ImageFilename)
                    <div class="row mb-3">
                        <div class="col">
                            @Html.LabelFor(m=>m.FirstName, new { @class = "form-label" })
                            @Html.TextBoxFor(m=>m.FirstName, new { @class="form-control", @placeholder = "Firstname" })
                        </div>
                        <div class="col">
                            @Html.LabelFor(m=>m.LastName, new { @class = "form-label" })
                            @Html.TextBoxFor(m=>m.LastName, new { @class="form-control", @placeholder = "Lastname" })
                        </div>
                    </div>
                    <div class="col-12 mb-3">
                        @Html.LabelFor(m=>m.AddressLine1, new { @class = "form-label" })
                        @Html.TextBoxFor(m=>m.AddressLine1, new { @class="form-control", @placeholder = "1234 Main St" })                        
                    </div>
                    <div class="col-12 mb-3">
                        @Html.LabelFor(m=>m.AddressLine2, new { @class = "form-label" })
                        @Html.TextBoxFor(m=>m.AddressLine2, new { @class="form-control", @placeholder = "Apartment, studio, or floor" })                        
                    </div>
                    <div class="col-12 mb-3">
                        @Html.LabelFor(m=>m.AlternateEmail, new { @class = "form-label" })
                        @Html.TextBoxFor(m=>m.AlternateEmail, new { @class="form-control", @placeholder = "alternate@email.com" })
                    </div>
                    <div class="col-12 mb-3">
                        @Html.LabelFor(m=>m.CountryCode, new { @class = "form-label" })
                        @Html.DropDownListFor(m=>m.CountryCode, 
                            new List<SelectListItem>{ new SelectListItem(){ Text = "Select...", Disabled = true, Selected = true } },
                            new { @class="form-select", @onchange = "getCountryDetails()" })
                    </div>
                    <div class="row mb-3">
                        <div class="col">
                            @Html.LabelFor(m=>m.Mobile, new { @class = "form-label" })
                            <div class="input-group">
                                <span class="input-group-text calling-code"></span>
                                @Html.TextBoxFor(m=>m.Mobile, new { @class="form-control", @placeholder = "Mobile" })
                            </div>
                        </div>
                        <div class="col">
                            @Html.LabelFor(m=>m.AlternateMobile, new { @class = "form-label" })
                            <div class="input-group">
                                <span class="input-group-text calling-code"></span>
                                @Html.TextBoxFor(m=>m.AlternateMobile, new { @class="form-control", @placeholder = "Alternate mobile" })
                            </div>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6 mb-3">
                            @Html.LabelFor(m=>m.City, new { @class = "form-label" })
                            @Html.TextBoxFor(m=>m.City, new { @class="form-control", @placeholder = "City" })                        
                        </div>
                        <div class="col-md-4 mb-3">
                            @Html.LabelFor(m=>m.StateCode, new { @class = "form-label" })
                            @Html.DropDownListFor(m=>m.StateCode,
                                new List<SelectListItem>{ new SelectListItem(){ Text = "Select...", Disabled = true} },
                                new { @class="form-select" })                        
                        </div>
                        <div class="col-md-2 mb-3">
                            @Html.LabelFor(m=>m.PostCode, new { @class = "form-label" })
                            @Html.TextBoxFor(m=>m.PostCode, new { @class="form-control", @placeholder = "Postal code" })                        
                        </div>
                    </div>
                    <div class="d-grid mb-3">
                        <input type="submit" disabled class="btn btn-primary" id="submitForm" value="Save Changes" />
                    </div>
                }
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="fileUploadModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="staticBackdropLabel">Upload</h5>
                <button type="button" class="btn-close" onclick="closeDialog()" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="file-drop-area p-4">
                    <div class="drop-area-container">
                        <span class="choose-file-button btn btn-primary">Choose Files</span>
                        <span class="file-message">or drag and drop files here</span>
                    </div>
                    <input type="file" class="file-input" accept=".jpg,.jpeg,.png,.svg" onchange="uploadImage()" />
                </div>
                <div id="image-preview-area" class="p-4">
                    <img id="image-preview" class="rounded-circle mb-2" />
                    <div>
                        <label>File: <label id="profile-image-file" class="me-2">image.img</label>
                            <a href="#" onclick="resetUploadImageDialog()">Clear</a>
                        </label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" onclick="closeDialog()">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="applyImage()">Apply</button>
            </div>
        </div>
    </div>
</div>
@section Scripts{
    
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script type="text/javascript">
        var dialog;
        $(function () {
            getCountryList();
            initImageUploadDialog();
        });

        function formChanged(){
            $("#submitForm").attr("disabled", null);
        }

        function getCountryList(){
            var url = "/api/data/countries";
            $.ajax({
                type: 'GET',
                url: url,
                accept: 'application/json',
                success: function (response) {
                    if (response.success) {
                        var countryListId = '#@Html.IdFor(m => m.CountryCode)';
                        response.countries.forEach(function(c, index) {
                            $(countryListId).append('<option value="' + c.countryCode + '">' + c.countryName + '</option>');
                        });
                        var selectedCountry = '@Model.CountryCode';
                        if (selectedCountry.length > 0) {
                            $(countryListId).val(selectedCountry);
                            getCountryDetails();
                        }
                    }
                },
                error: function (xhrError) {
                    console.log(xhrError);
                    alert("Something went wrong! Please contact support")
                }
            });
        }

        function getCountryDetails() {
            var countryCode = $("#@Html.IdFor(m=>m.CountryCode)").val();
            if (countryCode) {
                getStates(countryCode);
                getCountryCallingCode(countryCode);
            }
        }

        function getStates(countryCode) {
            var url = "/api/data/states/" + countryCode
            $.ajax({
                type: 'GET',
                url: url,
                accept: 'application/json',
                success: function (response) {
                    if (response.success) {
                        var stateListId = '#@Html.IdFor(m => m.StateCode)';
                        $(stateListId).empty();
                        $(stateListId).append('<option disabled="disabled">Select...</option>');
                        response.states.forEach(function (s, index) {
                            $(stateListId).append('<option value="' + s.stateUniqueId + '">' + s.stateName + '</option>');
                        });
                        var selectedState = '@Model.StateCode';
                        if (selectedState.length > 0) {
                            $(stateListId).val(selectedState);
                        }
                    }
                },
                error: function (xhrError) {
                    console.log(xhrError);
                    alert("Something went wrong! Please contact support")
                }
            });
        }

        function getCountryCallingCode(countryCode) {
            var token = $('input[name="__RequestVerificationToken"]').val();

            var url = "/api/data/getCallingCode/" + countryCode;
            $.ajax({
                type: 'GET',
                url: url,
                headers: {
                    "RequestVerificationToken": token
                },
                accept: 'application/json',
                success: function (response) {
                    var callingCode = "+" + response.callingCode;
                    $(".calling-code").text(callingCode);
                },
                error: function (xhrError) {
                    console.log(xhrError);
                    alert("Something went wrong! Please contact support")
                }
            });         
        }

        function initImageUploadDialog(){
            dialog = new bootstrap.Modal("#fileUploadModal");
            resetUploadImageDialog();
        }

        function showDialog(){
            resetUploadImageDialog();
            dialog.show();
        }

        function closeDialog(){
            dialog.hide();
            resetUploadImageDialog();
        }

        function applyImage() {
            var img = $("#image-preview");
            var imageString = img.attr("src");
            $(".img-account-profile").attr("src", imageString);
            $("#@Html.IdFor(m=> m.ImageData)").val(imageString);
            var fileName = $("#profile-image-file").text();
            $("#@Html.IdFor(m=> m.ImageFilename)").val(fileName);
            formChanged();
            closeDialog();
        }

        function uploadImage() {
            var fileUpload = $(".file-input")[0];
            if (fileUpload.files.length > 0) {
                var imageFile = fileUpload.files[0];
                var fileSize = Math.round(imageFile.size / 1024);
                if (fileSize < 5120) {
                    var fileName = imageFile.name;
                    $("#profile-image-file").text(fileName);
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var img = $("#image-preview");
                        img.attr("src", e.target.result);
                        showImagePreviewArea();
                    }
                    reader.readAsDataURL(imageFile);
                }
                else {
                    alert("File size too big");
                }
            }
        }

        function resetUploadImageDialog() {
            var fileUpload = $(".file-input");
            fileUpload.val('');
            $("#profile-image-file").text('image.img');
            showImageUploadArea();
        }

        function showImagePreviewArea() {
            $("#image-preview-area").show();
            $(".file-drop-area").hide();
        }

        function showImageUploadArea() {
            $("#image-preview-area").hide();
            $(".file-drop-area").show();
        }
    </script>
}

